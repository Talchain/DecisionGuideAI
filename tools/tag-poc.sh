#!/bin/bash

# PoC Tagging Helper for DecisionGuide AI
# Verifies release:dry is green, then prints exact git tag and gh release commands
# Usage: ./tools/tag-poc.sh [version]

set -e

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default version if not provided
VERSION="${1:-v1.0.0-poc}"

echo -e "${BLUE}🏷️  PoC Tagging Helper${NC}"
echo "======================================"
echo -e "Target version: ${YELLOW}${VERSION}${NC}"
echo ""

# Step 1: Verify we're in the right directory
if [[ ! -f "package.json" ]] || [[ ! -d "tools" ]]; then
    echo -e "${RED}❌ Error: Run this from the project root directory${NC}"
    exit 1
fi

# Step 2: Check current git status
echo -e "${BLUE}📍 Git Status Check${NC}"
if [[ -n $(git status --porcelain) ]]; then
    echo -e "${YELLOW}⚠️  Warning: Uncommitted changes detected${NC}"
    git status --porcelain
    echo ""
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}❌ Aborted by user${NC}"
        exit 1
    fi
fi

# Step 3: Run release dry-run validation
echo -e "${BLUE}🚀 Running Release Dry-Run Validation${NC}"
echo "Running: npm run release:dry"
echo ""

if npm run release:dry; then
    echo -e "${GREEN}✅ Release dry-run passed!${NC}"
else
    echo -e "${RED}❌ Release dry-run failed!${NC}"
    echo ""
    echo -e "${YELLOW}Fix the issues above before tagging.${NC}"
    echo "Common fixes:"
    echo "  - Run tests: npm test"
    echo "  - Fix TypeScript: npm run typecheck"
    echo "  - Turn OFF powerful features (ensure defaults OFF)"
    echo "  - Update contract schemas if needed"
    exit 1
fi

echo ""

# Step 4: Get current commit and branch info
CURRENT_COMMIT=$(git rev-parse HEAD)
CURRENT_BRANCH=$(git branch --show-current)
SHORT_COMMIT=$(git rev-parse --short HEAD)

echo -e "${BLUE}📝 Release Information${NC}"
echo "Branch: ${CURRENT_BRANCH}"
echo "Commit: ${SHORT_COMMIT}"
echo "Full commit: ${CURRENT_COMMIT}"
echo ""

# Step 5: Generate tag command
echo -e "${GREEN}🏷️  Tag Command (copy and run):${NC}"
echo ""
echo "git tag -a ${VERSION} -m \"PoC v1 Release

Scenario Sandbox Proof-of-Concept Release

## Features
- Real-time streaming decision analysis
- SSE with resume/cancel capabilities
- Job progress tracking with cancellation
- Comprehensive UI fixtures for edge cases
- Full evidence pack with test coverage
- Sim Mode for safe demonstrations

## Safety Defaults
- All powerful features OFF by default
- Rate limiting: OFF
- Usage monitoring: OFF
- Cache: OFF
- Secret hygiene blocking: OFF
- SLOs: OFF

## Validation
- Contract Wall: ✅ Green
- Unit Tests: ✅ All passing (82/82)
- Integration Tests: ✅ Validated
- Determinism Check: ✅ Consistent
- Config Security: ✅ Secure
- TypeScript: ✅ Clean compilation

Generated by PoC tagging helper at $(date -u +"%Y-%m-%d %H:%M:%S UTC")
Commit: ${CURRENT_COMMIT}
Branch: ${CURRENT_BRANCH}\""

echo ""

# Step 6: Generate GitHub release command
echo -e "${GREEN}🚀 GitHub Release Command (copy and run):${NC}"
echo ""
echo "gh release create ${VERSION} \\
  --title \"DecisionGuide AI PoC v1 - Scenario Sandbox\" \\
  --notes \"# 🎯 DecisionGuide AI Proof-of-Concept v1

## What's New
This PoC release demonstrates the core capabilities of our Scenario Sandbox platform:

### ✨ Key Features
- **Real-time Streaming**: Live decision analysis with SSE streaming
- **Resilience**: Automatic resume, graceful cancellation, and error recovery
- **Job Tracking**: Background task progress with user-controlled cancellation
- **Edge Case Testing**: Comprehensive UI fixtures for all scenarios
- **Evidence-Based**: Full test coverage and validation reports

### 🛡️ Safety First
- **Sim Mode**: Safe demonstration mode enabled by default
- **All Flags OFF**: Rate limiting, monitoring, cache, and powerful features disabled
- **No Secrets**: Zero personal data or API keys in demo mode
- **Contract Wall**: API contracts validated and stable

### 📦 What's Included
- \`artifacts/poc-v1-release-kit.html\` - Complete presentation guide
- \`artifacts/start-here.html\` - Interactive platform overview
- \`artifacts/ui-fixtures/\` - Deterministic test scenarios
- \`artifacts/index.html\` - Evidence pack with all validation results

### 🧪 Validation Results
- ✅ **Contract Wall**: Green (API stability guaranteed)
- ✅ **Unit Tests**: 82/82 passing
- ✅ **Integration**: All systems validated
- ✅ **Determinism**: Analysis results consistent
- ✅ **Security**: Configuration secure, no leaks detected
- ✅ **TypeScript**: Clean compilation, no type errors

### 🚀 Quick Start
1. Open \`artifacts/start-here.html\` for platform overview
2. Use \`artifacts/poc-v1-release-kit.html\` for stakeholder demos
3. All powerful features are OFF by default (safe for any environment)
4. Sim Mode provides realistic demo data without API calls

### 📋 For Stakeholders
This release is ready for:
- Executive demonstrations
- Technical deep-dives
- Integration planning
- Security review
- Performance evaluation

All evidence and validation reports included in the artifacts directory.

---
*Built with safety defaults and comprehensive validation*\" \\
  --draft"

echo ""

# Step 7: Final reminders
echo -e "${YELLOW}⚠️  Important Reminders:${NC}"
echo "1. 🔍 Review the generated tag message above"
echo "2. 🏷️  Run the git tag command to create the tag"
echo "3. 📤 Push the tag: git push origin ${VERSION}"
echo "4. 🚀 Run the gh release command to create GitHub release"
echo "5. 🎯 The release will be created as DRAFT - review before publishing"
echo "6. ✅ Verify defaults remain OFF in the tag notes above"
echo ""
echo -e "${GREEN}🎉 Ready to tag PoC v1!${NC}"
echo ""
echo -e "${BLUE}Tip: Test the tag first with:${NC}"
echo "  git tag -l  # List existing tags"
echo "  git show ${VERSION}  # View tag details after creation"