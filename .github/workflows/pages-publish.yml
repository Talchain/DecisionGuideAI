name: Publish GitHub Pages (Manual)

# OFF by default - requires manual workflow_dispatch
on:
  workflow_dispatch:
    inputs:
      publish:
        description: 'Actually publish to GitHub Pages (default: false = dry-run)'
        type: boolean
        default: false
        required: false
      subset:
        description: 'Content subset to publish'
        type: choice
        options:
          - demo
        default: demo
        required: false
      strict_scan:
        description: 'Enable strict scanning (blocks on Critical findings)'
        type: boolean
        default: false
        required: false

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  publish:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run artefacts scan and get summary
        run: |
          if [ "${{ github.event.inputs.strict_scan }}" = "true" ]; then
            echo "🔒 Running in strict scan mode"
            npm run artefacts:scan:strict
          else
            echo "🔍 Running in advisory scan mode (non-blocking)"
            npm run artefacts:scan || true
          fi

          # Extract scan results for summary
          if [ -f "artifacts/reports/artefact-scan.md" ]; then
            SCAN_FILES=$(grep "Files Scanned:" artifacts/reports/artefact-scan.md | head -1 | sed 's/.*Files Scanned.*: \([0-9]*\).*/\1/' || echo "0")
            SCAN_ISSUES=$(grep "Total Issues:" artifacts/reports/artefact-scan.md | head -1 | sed 's/.*Total Issues.*: \([0-9]*\).*/\1/' || echo "0")
            echo "SCAN_FILES=$SCAN_FILES" >> $GITHUB_ENV
            echo "SCAN_ISSUES=$SCAN_ISSUES" >> $GITHUB_ENV
          else
            echo "SCAN_FILES=0" >> $GITHUB_ENV
            echo "SCAN_ISSUES=0" >> $GITHUB_ENV
          fi

          # Get contract coverage
          npm run contract:coverage > /dev/null 2>&1 || true
          if [ -f "artifacts/reports/contract-coverage.html" ]; then
            COVERAGE_PERCENT=$(grep -o "Average Coverage: [0-9]*%" artifacts/reports/contract-coverage.html | head -1 | sed 's/Average Coverage: \([0-9]*\)%.*/\1/' || echo "0")
            echo "COVERAGE_PERCENT=$COVERAGE_PERCENT" >> $GITHUB_ENV
          else
            echo "COVERAGE_PERCENT=0" >> $GITHUB_ENV
          fi

          echo "📊 Scan completed: $SCAN_FILES files, $SCAN_ISSUES issues"
          echo "📊 Coverage: $COVERAGE_PERCENT%"

      - name: Prepare demo subset from manifest
        if: inputs.subset == 'demo'
        run: |
          mkdir -p _site

          echo "📋 Reading demo manifest: artifacts/pages-manifest-demo.json"
          echo "📊 Artefacts scan: $SCAN_FILES files scanned, $SCAN_ISSUES issues found"
          echo "📊 Contract coverage: $COVERAGE_PERCENT%"
          echo ""

          if [ ! -f "artifacts/pages-manifest-demo.json" ]; then
            echo "❌ Demo manifest not found, falling back to basic files"
            cp artifacts/start-here.html _site/index.html 2>/dev/null || echo "⚠️ start-here.html not found"
            exit 0
          fi

          echo "🏗️ Preparing demo subset using manifest (curated safe files only)"

          # Read allowed files from manifest and copy them
          cat artifacts/pages-manifest-demo.json | jq -r '.allowedFiles[]' 2>/dev/null | while read file; do
            if [ -f "$file" ]; then
              # Create directory structure
              target_dir="_site/$(dirname "$file")"
              mkdir -p "$target_dir"

              # Copy file
              cp "$file" "_site/$file"
              echo "✅ Copied: $file"
            else
              echo "⚠️ Not found: $file"
            fi
          done

          # Copy sample files
          cat artifacts/pages-manifest-demo.json | jq -r '.sampleFiles[]' 2>/dev/null | while read file; do
            if [ -f "$file" ]; then
              target_dir="_site/$(dirname "$file")"
              mkdir -p "$target_dir"
              cp "$file" "_site/$file"
              echo "✅ Sample: $file"
            else
              echo "⚠️ Sample not found: $file"
            fi
          done

          # Set start-here.html as index.html
          if [ -f "_site/artifacts/start-here.html" ]; then
            cp "_site/artifacts/start-here.html" "_site/index.html"
            echo "✅ Set start-here.html as index.html"
          fi

          echo ""
          echo "📁 Demo subset prepared using manifest"

      - name: Add demo banner to HTML files
        run: |
          # Add banner to all HTML files
          find _site -name "*.html" -type f -exec sed -i.bak 's|<body[^>]*>|&\
          <div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 8px; margin: 10px 0; border-radius: 4px; font-size: 14px; color: #856404;">\
          <strong>🏷️ Demo artefacts only</strong> — No personal data included. Generated from DecisionGuide AI integration tests.\
          </div>|' {} \; && rm -f _site/*.bak

      - name: List files and show summary (dry-run or publish)
        run: |
          echo "📊 Publication Summary"
          echo "======================"
          echo "📊 Artefacts scan: $SCAN_FILES files scanned, $SCAN_ISSUES issues found"
          echo "📊 Contract coverage: $COVERAGE_PERCENT%"
          echo "🎯 Publish mode: ${{ inputs.publish }}"
          echo "📦 Subset: ${{ inputs.subset }}"
          echo ""

          echo "📋 Files to be published:"
          TOTAL_FILES=0
          TOTAL_SIZE=0
          find _site -type f 2>/dev/null | sort | sed 's|_site/||' | while read file; do
            if [ -f "_site/$file" ]; then
              size=$(wc -c "_site/$file" 2>/dev/null | awk '{print $1}' || echo "0")
              echo "  📄 $file (${size} bytes)"
              TOTAL_FILES=$((TOTAL_FILES + 1))
              TOTAL_SIZE=$((TOTAL_SIZE + size))
            fi
          done || echo "No files found"

          FILE_COUNT=$(find _site -type f 2>/dev/null | wc -l || echo "0")
          TOTAL_SIZE_KB=$(du -sk _site 2>/dev/null | awk '{print $1}' || echo "0")

          echo ""
          echo "📊 Total: $FILE_COUNT files, ${TOTAL_SIZE_KB}KB"

          # Reference scan report
          if [ -f "_site/artifacts/reports/artefact-scan.md" ]; then
            echo "🔗 Security scan report included: artifacts/reports/artefact-scan.md"
          fi

      - name: Setup Pages (only if publishing)
        if: inputs.publish == true
        uses: actions/configure-pages@v5

      - name: Upload to GitHub Pages (only if publishing)
        if: inputs.publish == true
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site/

      - name: Deploy to GitHub Pages (only if publishing)
        if: inputs.publish == true
        uses: actions/deploy-pages@v4
        id: deployment

      - name: Summary
        run: |
          echo "## 📊 Pages Publisher Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Publish**: ${{ inputs.publish }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Subset**: ${{ inputs.subset }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Strict Scan**: ${{ inputs.strict_scan }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Files prepared**: $(find _site -type f 2>/dev/null | wc -l || echo 0)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.publish }}" = "true" ]; then
            echo "✅ **Published** to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "🔗 Site URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "🏃 **Dry-run completed** - no files published" >> $GITHUB_STEP_SUMMARY
            echo "💡 Set \`publish: true\` to actually publish" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 [Artefacts scan report](./reports/artefact-scan.md)" >> $GITHUB_STEP_SUMMARY